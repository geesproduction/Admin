/*
 * Decompiled with CFR 0.0.
 * 
 * Could not load the following classes:
 *  android.graphics.Typeface
 *  java.lang.Float
 *  java.lang.IllegalArgumentException
 *  java.lang.Object
 *  java.lang.String
 *  java.util.ArrayList
 *  java.util.Iterator
 *  java.util.List
 */
package lecho.lib.hellocharts.model;

import android.graphics.Typeface;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import lecho.lib.hellocharts.formatter.AxisValueFormatter;
import lecho.lib.hellocharts.formatter.SimpleAxisValueFormatter;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.util.ChartUtils;

public class Axis {
    public static final int DEFAULT_MAX_AXIS_LABEL_CHARS = 3;
    public static final int DEFAULT_TEXT_SIZE_SP = 12;
    private AxisValueFormatter formatter;
    private boolean hasLines;
    private boolean hasSeparationLine;
    private boolean hasTiltedLabels;
    private boolean isAutoGenerated;
    private boolean isInside;
    private int lineColor;
    private int maxLabelChars;
    private String name;
    private int textColor;
    private int textSize;
    private Typeface typeface;
    private List<AxisValue> values;

    public Axis() {
        this.textSize = 12;
        this.maxLabelChars = 3;
        this.values = new ArrayList();
        this.isAutoGenerated = true;
        this.hasLines = false;
        this.isInside = false;
        this.textColor = -3355444;
        this.lineColor = ChartUtils.DEFAULT_DARKEN_COLOR;
        this.formatter = new SimpleAxisValueFormatter();
        this.hasSeparationLine = true;
        this.hasTiltedLabels = false;
    }

    public Axis(List<AxisValue> list) {
        this.textSize = 12;
        this.maxLabelChars = 3;
        this.values = new ArrayList();
        this.isAutoGenerated = true;
        this.hasLines = false;
        this.isInside = false;
        this.textColor = -3355444;
        this.lineColor = ChartUtils.DEFAULT_DARKEN_COLOR;
        this.formatter = new SimpleAxisValueFormatter();
        this.hasSeparationLine = true;
        this.hasTiltedLabels = false;
        this.setValues(list);
    }

    public Axis(Axis axis) {
        this.textSize = 12;
        this.maxLabelChars = 3;
        this.values = new ArrayList();
        this.isAutoGenerated = true;
        this.hasLines = false;
        this.isInside = false;
        this.textColor = -3355444;
        this.lineColor = ChartUtils.DEFAULT_DARKEN_COLOR;
        this.formatter = new SimpleAxisValueFormatter();
        this.hasSeparationLine = true;
        this.hasTiltedLabels = false;
        this.name = axis.name;
        this.isAutoGenerated = axis.isAutoGenerated;
        this.hasLines = axis.hasLines;
        this.isInside = axis.isInside;
        this.textColor = axis.textColor;
        this.lineColor = axis.lineColor;
        this.textSize = axis.textSize;
        this.maxLabelChars = axis.maxLabelChars;
        this.typeface = axis.typeface;
        this.formatter = axis.formatter;
        this.hasSeparationLine = axis.hasSeparationLine;
        for (AxisValue axisValue : axis.values) {
            this.values.add((Object)new AxisValue(axisValue));
        }
    }

    public static Axis generateAxisFromCollection(List<Float> list) {
        ArrayList arrayList = new ArrayList();
        int n = 0;
        Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
            arrayList.add((Object)new AxisValue(((Float)iterator.next()).floatValue()));
            ++n;
        }
        return new Axis((List<AxisValue>)arrayList);
    }

    public static Axis generateAxisFromCollection(List<Float> list, List<String> list2) {
        if (list.size() != list2.size()) {
            throw new IllegalArgumentException("Values and labels lists must have the same size!");
        }
        ArrayList arrayList = new ArrayList();
        int n = 0;
        Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
            arrayList.add((Object)new AxisValue(((Float)iterator.next()).floatValue()).setLabel((String)list2.get(n)));
            ++n;
        }
        return new Axis((List<AxisValue>)arrayList);
    }

    public static Axis generateAxisFromRange(float f, float f2, float f3) {
        ArrayList arrayList = new ArrayList();
        for (float f4 = f; f4 <= f2; f4 += f3) {
            arrayList.add((Object)new AxisValue(f4));
        }
        return new Axis((List<AxisValue>)arrayList);
    }

    public AxisValueFormatter getFormatter() {
        return this.formatter;
    }

    public int getLineColor() {
        return this.lineColor;
    }

    public int getMaxLabelChars() {
        return this.maxLabelChars;
    }

    public String getName() {
        return this.name;
    }

    public int getTextColor() {
        return this.textColor;
    }

    public int getTextSize() {
        return this.textSize;
    }

    public Typeface getTypeface() {
        return this.typeface;
    }

    public List<AxisValue> getValues() {
        return this.values;
    }

    public boolean hasLines() {
        return this.hasLines;
    }

    public boolean hasSeparationLine() {
        return this.hasSeparationLine;
    }

    public boolean hasTiltedLabels() {
        return this.hasTiltedLabels;
    }

    public boolean isAutoGenerated() {
        return this.isAutoGenerated;
    }

    public boolean isInside() {
        return this.isInside;
    }

    public Axis setAutoGenerated(boolean bl) {
        this.isAutoGenerated = bl;
        return this;
    }

    public Axis setFormatter(AxisValueFormatter axisValueFormatter) {
        if (axisValueFormatter == null) {
            this.formatter = new SimpleAxisValueFormatter();
            return this;
        }
        this.formatter = axisValueFormatter;
        return this;
    }

    public Axis setHasLines(boolean bl) {
        this.hasLines = bl;
        return this;
    }

    public Axis setHasSeparationLine(boolean bl) {
        this.hasSeparationLine = bl;
        return this;
    }

    public Axis setHasTiltedLabels(boolean bl) {
        this.hasTiltedLabels = bl;
        return this;
    }

    public Axis setInside(boolean bl) {
        this.isInside = bl;
        return this;
    }

    public Axis setLineColor(int n) {
        this.lineColor = n;
        return this;
    }

    /*
     * Enabled aggressive block sorting
     */
    public Axis setMaxLabelChars(int n) {
        if (n < 0) {
            n = 0;
        } else if (n > 32) {
            n = 32;
        }
        this.maxLabelChars = n;
        return this;
    }

    public Axis setName(String string2) {
        this.name = string2;
        return this;
    }

    public Axis setTextColor(int n) {
        this.textColor = n;
        return this;
    }

    public Axis setTextSize(int n) {
        this.textSize = n;
        return this;
    }

    public Axis setTypeface(Typeface typeface) {
        this.typeface = typeface;
        return this;
    }

    /*
     * Enabled aggressive block sorting
     */
    public Axis setValues(List<AxisValue> list) {
        this.values = list == null ? new ArrayList() : list;
        this.isAutoGenerated = false;
        return this;
    }
}

